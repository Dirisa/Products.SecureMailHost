PloneHelpCenter - remaining issues

=================
Template changes:
=================

 - All PHC types need to show the "log in to add FAQ/How-to/whatever" button  
        
 - Definitions (glossary_view template) should be alphabetically sorted - 
    proper human sorting, not UNIX-sorting (ie. not uppercase letters before 
    lowercase).
    
 - Tutorial Page pulldown needs to show the existing page as selected

 - The help center template should list any other normal folders put into it, 
    so you can add stuff that is just plain folders, like on plone.org.

 - The folder listing templates need to show only *published* items, regardless
    of what the user is permitted to see. Managers and reviewers should also
    see pending (but not in-progress or obsolete) items, styled in a different
    colour (this styling already exists)
    
 - Reference manual front page should show TOC with all sections, sub-sections,
    pages nested (need recursive script - see referencemanual_getSections.py).
    
 - Reference manual drop-down selector should show full chapter numbering, 
    e.g. "1.1.3 Installing Plone", and should show entire TOC

====================
Versions management:
====================

 - Add a way to set the "current" version(s) of the release - this way, we
    can automatically display a portalMessage box on content that says:
    "This content is only relevant to Plone 1.0. The current version is
     Plone 2.0. Make sure you are using the correct version before
     following the instructions given here."
 
  - Nice to have: A way to set the default view help-center-wide 
    (Example, let's say we just want to show Plone 2.0 elements 
     in the listings). Probably want to be able to choose more than one
     version, and provide some view to older content!

===================================
Workflow changes/permission issues:
===================================

 - Add visible/hidden workflow for tutorial and reference manual sections and
    pages? Currently, these have no workflow, but being able to hide things in
    progress would be good.
    
 - Owners should be able to edit content in the 'published' state to make
    updates easier.
    
 - Owners should be able to mark their own content obsolete
 
 - Naming of transition from obsolete to in-progress (and other states?) is
    non-obvious and must be changed.
    
 - Regular members don't have permission to add items if portal_factory is 
    enabled (as it is now). Either we must fix permissions, or we must fix
    the factory (or disable it, but that would a shame)
    
=====================
Schema/class changes:
=====================

 - Definitions (in Glossary) need to be able to have links to other
    definitions.   

 - HistoryAware mixin should be enabled for all types. Done, but some fields
    don't get history, since they are metadata-only (e.g. glossary definitions),
    and these are not revisioned in the ZODB. We can make them non-metadata
    fields, and provide secondary accessors, or turn of the history mixin.

  - Add LinguaPlone support to the types
    - The LinguaPlone import statement
    - Declare relevant fields as language-independent
    
 - Integrate with ATRatings, so that we can have ratings on content

 - The DC metadata "Rights" attribute needs to be set PHC-wide at the root
    level. Content objects should use this. We can achieve this by taking
    'rights' out of the schema, and ovveride the DC standard accessor to have
    it acquire it from the PHC root. On Plone.org, we don't want to let people
    override this site-wide default, but ideally, we'd have a switch in the 
    root PHC object where it could be allowed back in the schema.
    
 - Importance vocabulary could be made dynamic, in the same way that "versions"
    is currently.
    
 - Instructional video should use ExternalStorage for video files

====================
Installation issues:
====================

 - Ideally, the "How to contribute to/use this resource" (phc_help) should be a 
    pre-populated howto itself, so it can be translated/modified to suit the
    particular use case.
    
 - Include documentation review portlet from plone.org
 
 
============================
Need testing/unit test work:
============================

 - Need to test Search, ensuring it searches all content types (esp. glossary,
    for where there were problems reported)
    
 - Need to test RSS feed, especially with foreign characters and UTF-8
 
 - Comment workflow and notification
 
  - We need many more unit tests!
  
=======
Future:
=======

 - We'd like the listing pages to use catalogue searches, but this depends on
    ExtendedPathIndex
    
 - Similarly, the Tutorial and especially Reference Manual TOC pages and
    drop-down selectors should use the catalogue.
    
 - Advanced video upload:
    
 - Make it easier to choose which subcomponents get installed. For
    example, put a simple textual list in config.py of the folderish
    products, and have types/init.py, Install.py, and
    HelpCenter.py/__init__ respect this. Easier for other people who
    want to use product but might not want all parts. 

  - It could be possible to save the longer content (howtos, tutorials)
    as a PDF file for easier archival and printing. A small PDF icon
    can be placed next to the email/print icons, and when clicked on
    generates a PDF version of the page, minus all the navigation.
    We could perhaps use the plonePrint.css to generate a nice looking PDF.
  
    Joel Burton reports good success with htmldoc for converting well-formed
    HTML to decent PDFs. 
  
    Another possibility is to use CMFReportTool by Ulrich Eck 
    <ueck@net-labs.de>, which can serve dynamically generated PDF-Documents for
    every content-object of your CMF/Plone-Site. It uses PageTemplates to 
    generate a XML-Document (syntax is called PML) that is rendered to PDF using
    reportlabs platypus layout-engine. 
    
    http://www.zope.org/Members/jack-e/CMFReportTool  


==================== END TASKS =======================

===============================
Comment notifications reference
===============================

  People need to be notified when somebody adds a comment to their item,
  so they can maintain and refine. The PloneHelpCenter concept will not work 
  without this, IMHO.
    
  Overview:
  
  1. Author adds documentation, it is published.  
  
  2. Reader finds documentation, adds comment.
  
  3. Author gets mail: "Somebody added a comment to documentation you have added,
     please go here [URL] and incorporate the comment in the docs, if needed"
     
  4. Author incorporates comment in documentation, if relevant and useful. Author can edit owned content in-place after initial publication, no need for another submit/publish cycle.
  
  5. Author removes the comment
  
  In essence, we need a workflow called CommentNotifyWorkflow that does the
  following:
  
  a) If comment is added to content, sends mail to author of document
  
  b) If somebody adds reply to a comment, it notifies the first comment poster (I
     assume this can be done the same way (sending mail to owner of parent), just
     want to make sure this use case is covered too)
  
  The following patch was committed to the CMF 1.4.x branch, but didn't make the
  1.4.7 release. If you want workflow on comments, you need this patch, as 
  DiscussionItems do not use the factory::
  
    Index: DiscussionItem.py
    ===================================================================
    RCS file: /cvs-repository/Products/CMFDefault/DiscussionItem.py,v
    retrieving revision 1.33.4.3
    diff -u -r1.33.4.3 DiscussionItem.py
    --- DiscussionItem.py7 Aug 2004 12:59:42 -00001.33.4.3
    +++ DiscussionItem.py30 Aug 2004 16:12:19 -0000
    @@ -309,6 +309,8 @@
     
             item.setReplyTo( self._getDiscussable() )
     
    +        item.__of__(self).notifyWorkflowCreated()
    +
             self._container[ id ] = item
     
             return id


==========================
Workflow specs - reference
==========================

(by limi, trying to capture the most important things :)

- The main Plone Help Center *Content* workflow has the following states:

  - In-progress [Only Owner + Managers can View and Edit]
  
  - Pending [Owner can read but not edit, Managers/Reviewers approve]
  
  - Published [Everyone can view, Owner/Managers/Reviewers can Edit]

- Workflow mapping - This is the mapping to the different types:

  Plone Workflow -- PloneHelpCenter, 
                    FAQFolder, HowtoFolder, TutorialFolder, 
                    ErrorRefFolder, HelpLinkFolder, Glossary
                    
  Help Center Workflow -- FAQ, Howto, Tutorial,
                          ErrorReference, HelpLink, Definition
                          
  Not workflowed -- TutorialPage, Attachments

  Comments - SEE BELOW

- Permissions:

  - Members can add FAQ, Howto, Tutorial, ErrorRef, HelpLink, Definition
  
  - They are in-progress by default, if they want to cooperate on these, they
    will need to assign local roles.
    
  - Owners are allowed to edit their docs while published. Requiring them to 
    retract content to update or fix, and then approve again is painful.
    Since the piece of documentation has already been approved by then, it's
    "proven" that it was good enough when it started, it doesn't need to be
    re-verified, in my opinion. Feel free to point out why I'm wrong. :)
    
  - Any logged in Member can add a new FAQ, Howto, Tutorial, ErrorRef, HelpLink
    and Definition, but only the owners of those objects can add the sub-objects
    like TutorialPages and Attachments.
    
  - Tutorial is treated as a *unit*, which is why we don't workflow the 
    TutorialPages. They should just be inheriting the permissions of their 
    container (Tutorial).
    
  - The same goes for HowTos, Attachments aren't workflowed.
