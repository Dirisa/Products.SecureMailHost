Remaining to do:

General:

- PHC needs a Comment workflow! Priority #1, explained near the bottom of 
  this document.

- Bug: Howtos seem to not pick up the 'versions' defined in the Help Center.

- Bug: Contents tab is visible to normal Members (at least on plone.org)
       - it shouldn't be.

- All PHC types need to show the "log in to add FAQ/How-to/whatever" button

- Howtos need to have a note about the fact that they are folderish and can
  contain images/files
  
- Ideally, the "How to contribute to/use this resource" should be a howto
  itself
  
- Add LinguaPlone support to the types

- Discreet "Powered by PHC"
  
- HistoryAware mix-in - PHC types should have a history attached, so we can
  mount a non-packable storage on plone.org that will keep all the change
  history for documentation content types. ATContentTypes already has this.

- "Manual" content type - for book-type manuals and product documentation.
  Should be able to accommodate content like Andy's Plone Book, and 
  Raphael's MySite tutorial - as well as product manuals like LinguaPlone,
  Using Plone manual etc.

- We should probably let the TutorialPages not have any workflow at all, 
  I assume if you don't have permission to access/search the containing
  folder, you won't have it for the items contained in the folder either?
  Can anybody with a bit more workflow knowledge tell me if this is correct,
  and if it will work? Then the TutorialFolder state would control access to
  the whole thing, including pages/images - which is what we want.
  
- Tutorial needs inline explanation if you have an empty Tutorial, like
  ArchPackage does - only shows up if you have editing perms.

- The view templates for listings (howto, tutorial, faq etc - all of them)
  should only display *published* items, even if you have the permissions
  to see the others. Either that, or color-code the ones that are pending.
  ADDENDUM: It seems these are using object listings instead of catalog
            searches - which is not optimal. If we make them catalog-
            powered, they will be able to color-code themselves, and not
            wake up all the content objects as a bonus. ;)


- Search needs to be hooked up! It should allow searching on all the different
  types. Almost done, it doesn't search the Glossary at the moment, it seems.
  (limi)

- Expose Contributors in the main edit screen. It's going to be used a lot :)

- Obsolete state has non-obvious name for the transition to pull it back into
  play.

- A portlet to show content that hasn't been modified in 6 months - so we can go 
  in and see if it's still relevant. We'll just hit save if it is, this is a
  simple way of making sure content is reviewed periodically.

- A way to set PHC-wide default Rights attribute - on plone.org we want 
  everything to be under the same license, for example. Maybe look at
  PloneCC which is a product to add Creative Commons licenses.
  http://woss.name/software/PloneCC/

- Definitions (in Glossary) need to be able to have Rich Text - the way it is
  now, it can't have links to other definitions. The Description attribute 
  should be this field, just rendered to Plain Text. If this is too much work,
  having the "See also" thing so we can link to other definitions is also an
  option. (Actually - probably a better option, as it is less susceptible to
  link rot, since it's an AT reference)

- Definitions (glossary_view template) should be alphabetically sorted - 
  proper human sorting, not UNIX-sorting (ie. not uppercase letters before 
  lowercase).

- Make it easier to choose which subcomponents get installed. For
  example, put a simple textual list in config.py of the folderish
  products, and have types/init.py, Install.py, and
  HelpCenter.py/__init__ respect this. Easier for other people who
  want to use product but might not want all parts.

- There is something wrong with the permissions somehow - items that
  are "in-progress" are visible in the listings - they do not show
  up on the main page, though. The correct behaviour is that it should
  not show up for people who don't have the permission to see them
  (ie. Anon, Member) until they are published. "In-progress" and 
  "Pending" should both only be visible to Owner, Manager and in the
  case of "Pending" - also to the Reviewer role.

- Description should be required, the listings make very little sense
  without this.

Workflow - specification (by limi, trying to capture the most important things :)

- The main Plone Help Center *Content* workflow has the following states:

  - In-progress [Only Owner + Managers can View and Edit]
  
  - Pending [Owner can read but not edit, Managers/Reviewers approve]
  
  - Published [Everyone can view, Owner/Managers/Reviewers can Edit]

- Workflow mapping - This is the mapping to the different types:

  Plone Workflow -- PloneHelpCenter, 
                    FAQFolder, HowtoFolder, TutorialFolder, 
                    ErrorRefFolder, HelpLinkFolder, Glossary
                    
  Help Center Workflow -- FAQ, Howto, Tutorial,
                          ErrorReference, HelpLink, Definition
                          
  Not workflowed -- TutorialPage, Attachments

  Comments - SEE BELOW

- Permissions:

  - Members can add FAQ, Howto, Tutorial, ErrorRef, HelpLink, Definition
  
  - They are in-progress by default, if they want to cooperate on these, they
    will need to assign local roles.
    
  - Owners are allowed to edit their docs while published. Requiring them to 
    retract content to update or fix, and then approve again is painful.
    Since the piece of documentation has already been approved by then, it's
    "proven" that it was good enough when it started, it doesn't need to be
    re-verified, in my opinion. Feel free to point out why I'm wrong. :)
    
  - Any logged in Member can add a new FAQ, Howto, Tutorial, ErrorRef, HelpLink
    and Definition, but only the owners of those objects can add the sub-objects
    like TutorialPages and Attachments.
    
  - Tutorial is treated as a *unit*, which is why we don't workflow the 
    TutorialPages. They should just be inheriting the permissions of their 
    container (Tutorial).
    
  - The same goes for HowTos, Attachments aren't workflowed.
  

- Notify! People need to be notified when somebody adds a comment to their item,
  so they can maintain and refine. The PloneHelpCenter concept will not work 
  without this, IMHO. (limi)

  - Overview:

  Author incorporates comment in documentation, if relevant and useful. Author can edit owned content in-place after initial publication, no need for another submit/publish cycle.

 Author removes the comment
 so, we need a workflow called CommentNotifyWorkflow
 that does the following:
 1. if comment is added to content, sends mail to author of document
 2. if somebody adds reply to a comment, it notifies the first comment 
 poster (I assume this can be done the same way (sending mail to owner of parent), just want to make sure)



I18n:

- Some initial stuff has been put into to many types, but not always
  consistently. Can someone very familiar with i18n step up here?


Versions:

- Add UI to folder screens to only show content for selected versions.
  Alllows Plone 1.0 people,for example, to see only stuff pertaining
  to them. (limi)

- Add a way to set the "current" version of the release - this way, we
  can automatically display a portalMessage box on content that says:
  "This content is only relevant to Plone 1.0. The current version is
   Plone 2.0. Make sure you are using the correct version before
   following the instructions given here."

- Also need a way to set the default view help-center-wide 
  (Example, let's say we just want to show Plone 2.0 elements 
   in the listings) (limi)


Unit tests:

- We need some!

Saving content as PDF:

- It should be possible to save the longer content (howtos, tutorials)
  as a PDF file for easier archival and printing. A small PDF icon
  can be placed next to the email/print icons, and when clicked on
  generates a PDF version of the page, minus all the navigation.
  We could perhaps use the plonePrint.css to generate a nice looking PDF.

  Joel Burton reports good success with htmldoc for converting well-formed HTML 
  to decent PDFs. 

  Another possibility is to use CMFReportTool by Ulrich Eck <ueck@net-labs.de>,
  which can serve dynamically generated PDF-Documents for every content-object 
  of your CMF/Plone-Site. It uses PageTemplates to generate a XML-Document 
  (syntax is called PML) that is rendered to PDF using reportlabs platypus 
  layout-engine. http://www.zope.org/Members/jack-e/CMFReportTool


DONE:

- Consider having an "Important" marker on entries, to mark the most
  common ones visually with a red (!) marker in the overview/listing.

  - I think we can/should generalize this more: add a ImportanceVocab
    list to help center for list of importance raitings, ie,
    ('Important','Normal') Then folder skins can just sort based on
    the order that things are listed in the importance ratings, and
    add the red bang to the top-level ones. This gives us more
    flexibility for future importance ratings. [Joel]

  - I have added an importance field to all the content schema.  The vocabulary
    is defined in config.py.  [Geoff]

- We should have an extra attribute that has additional words that are
  indexed along with the content - for example in a howto about
  VerboseSecurity, it would make sense to have:

  - Verbose Security

  - Insufficient Privileges (the Plone Error Message)

  - Debugging security problems

  - etc...

  - I have added a related_keywords field to all the content schemata.  The
    contents get indexed along with the rest of the item's searchable text. 
    [Geoff]

- Integrate with the ratings tool

  - Being developed as a separate product.

- Add simple Glossary type, with Glossary entries (already added by limi)

  - I admit that it's 50% because we have 5 and not 6 different
    types now, which makes everything asymmetrical. ;)

  - I still think it could be useful though - say; define what an
    action is, have an Archetypes section with stuff like
    Schema, Schemata, they are referencable from other docs.
    Makes a nice print-out for newbies too. :)

  - Simple container folder, like the others - with Sections

  - Super-simple object that is essentially a definition list

  - No item-level rendering is really necessary, but anchors are
    important. Everything can probably be on one page if anchors
    are included, and visible as bookmarkable links.

  - Advanced-level functionality (pie-in-the-sky) is automatic 
    parsing of abbr tags to look in the glossary for entries.
    (not realistic at this stage, just a fun thought :) - lots
    of academic institutions would like something like this, with
    proper integration in Kupu it could be killer functionality. :)
