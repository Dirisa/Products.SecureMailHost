#------------------------------------------------------------------------------
# Name:         PloneFormMailer.py
# Purpose:      This product integrates Formulator and CMFFormController.
#               The form will be be mailed to a configureable recipient.
#               It is designed to be easily extended and adapted.
#
# Author:       Jens Klein <jens.klein@jensquadrat.de>
# generated by: ArchGenXML Version 0.9.14 http://sf.net/projects/archetypes/
#
# Created:      Sun Jan 25 22:09:22 2004
# RCS-ID:       $Id: __init__.py,v 1.3 2004/10/21 19:13:41 dreamcatcher Exp $
# Copyright:    (c) 2004 by jens quadrat GbR, Germany
# Licence:      GNU General Public Licence (GPL) Version 2 or later
#------------------------------------------------------------------------------
try:
    import CustomizationPolicy
    print 'Customizationpolicy for PloneFormMailer installed'
except ImportError:
    CustomizationPolicy=None

from Products.CMFCore import utils, DirectoryView
from Products.Archetypes.public import *
from Products.Archetypes import listTypes
from Products.Archetypes.utils import capitalize
from Products.PloneFormMailer.config import GLOBALS, PROJECTNAME
from Products.PloneFormMailer.config import ADD_CONTENT_PERMISSION

# register validators
from Products.PloneFormMailer import validators
del validators

from Products.PloneFormMailer.Extensions import Install
del Install

DirectoryView.registerDirectory('skins', GLOBALS)
DirectoryView.registerDirectory('skins/PloneFormMailer', GLOBALS)

def initialize(context):
    # Import Types here to register them
    import PloneFormMailer

    content_types, constructors, ftis = process_types(
        listTypes(PROJECTNAME),
        PROJECTNAME)

    utils.ContentInit(
        PROJECTNAME + ' Content',
        content_types      = content_types,
        permission         = ADD_CONTENT_PERMISSION,
        extra_constructors = constructors,
        fti                = ftis,
        ).initialize(context)

    # And now give it some extra permissions so that we can control
    # them on a per-class basis
    for fti, ctor in zip(ftis, constructors):
        type_name = capitalize(fti['id'])
        perm = 'Add %ss' % type_name
        meta_type = fti['meta_type']

        context.registerClass(
            meta_type=meta_type,
            constructors=(ctor,),
            permission=perm
            )

    if CustomizationPolicy and hasattr(CustomizationPolicy,'register'):
        CustomizationPolicy.register(context)
